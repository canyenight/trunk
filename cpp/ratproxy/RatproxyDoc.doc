{\rtf1\ansi\ansicpg936\deff0\deflang1033\deflangfe2052{\fonttbl{\f0\fswiss\fprq2\fcharset0 Verdana;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;\red255\green255\blue0;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\b\f0\fs18 RatproxyDoc\b0\par
\par
\i Project documentation\par
\pard\sb100\sa100\kerning36\b\i0 ratproxy - passive web application security assessment tool\par
\pard\fi-360\li720\sb100\sa100\tx720\kerning0\b0\f1\fs20\'b7\tab\f0\fs18 Written and maintained by {\field{\*\fldinst{HYPERLINK "http://lcamtuf.coredump.cx/" }}{\fldrslt{\cf1\ul Michal Zalewski}}}\cf0\ulnone\f0\fs18  <{\field{\*\fldinst{HYPERLINK "mailto:lcamtuf@google.com" }}{\fldrslt{\cf1\ul lcamtuf@google.com}}}\cf0\ulnone\f0\fs18 >. \par
\pard\fi-360\li720\sb100\sa100\f1\fs20\'b7\tab\f0\fs18 Copyright 2007, 2008 Google Inc, rights reserved. \par
\f1\fs20\'b7\tab\f0\fs18 Released under terms and conditions of the Apache License, version 2.0. \par
\pard\sb100\sa100\b What is ratproxy?\par
\b0\i Ratproxy\i0  is a semi-automated, largely passive web application security audit tool. It is meant to complement active crawlers and manual proxies more commonly used for this task, and is optimized specifically for an accurate and sensitive detection, and automatic annotation, of potential problems and security-relevant design patterns based on the observation of existing, user-initiated traffic in complex \i web 2.0\i0  environments. The approach taken with \i ratproxy\i0  offers \highlight2 several important advantages\highlight0  over more traditional methods: \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 No risk of disruptions.\b0  In the default operating mode, tool does not generate a high volume of attack-simulating traffic, and as such may be safely employed against production systems at will, for all types of ad hoc, post-release audits. Active scanners may trigger DoS conditions or persistent XSSes, and hence are poorly suited for live platforms. \par
\f1\fs20\'b7\tab\b\f0\fs18 Low effort, high yield.\b0  Compared to active scanners or fully manual proxy-based testing, \i ratproxy\i0  assessments take very little time or bandwidth to run, and proceed in an intuitive, distraction-free manner - yet provide a good insight into the inner workings of a product, and the potential security vulnerabilities therein. They also afford a consistent and predictable coverage of user-accessible features. \par
\f1\fs20\'b7\tab\b\f0\fs18 Preserved control flow of human interaction.\b0  By silently following the browser, the coverage in locations protected by nonces, during other operations valid only under certain circumstances, or during dynamic events such as cross-domain Referer data disclosure, is greatly enhanced. Brute-force crawlers and fuzzers usually have no way to explore these areas in a reliable manner. \par
\f1\fs20\'b7\tab\b\f0\fs18 WYSIWYG data on script behavior.\b0  Javascript interfaces and event handlers are explored precisely to a degree they are used in the browser, with no need for complex guesswork or simulations. Active scanners often have a significant difficulty exploring JSON responses, XMLHttpRequest() behavior, UI-triggered event data flow, and the like. \par
\f1\fs20\'b7\tab\b\f0\fs18 Easy process integration.\b0  The proxy can be transparently integrated into an existing manual security testing or interface QA processes without introducing a significant setup or operator training overhead. \par
\pard\sb100\sa100\b Is it worth trying out?\par
\b0 There are numerous alternative proxy tools meant to aid security auditors - most notably {\field{\*\fldinst{HYPERLINK "http://www.owasp.org/index.php/Category:OWASP_WebScarab_Project" }}{\fldrslt{\cf1\ul WebScarab}}}\cf0\ulnone\f0\fs18 , {\field{\*\fldinst{HYPERLINK "http://www.parosproxy.org/" }}{\fldrslt{\cf1\ul Paros}}}\cf0\ulnone\f0\fs18 , {\field{\*\fldinst{HYPERLINK "http://portswigger.net/proxy/" }}{\fldrslt{\cf1\ul Burp}}}\cf0\ulnone\f0\fs18 , {\field{\*\fldinst{HYPERLINK "http://www.isecpartners.com/proxmon.html" }}{\fldrslt{\cf1\ul ProxMon}}}\cf0\ulnone\f0\fs18 , and {\field{\*\fldinst{HYPERLINK "http://www.owasp.org/index.php/Category:OWASP_Pantera_Web_Assessment_Studio_Project" }}{\fldrslt{\cf1\ul Pantera}}}\cf0\ulnone\f0\fs18 . Stick with whatever suits your needs, as long as you get the data you need in the format you like. \par
That said, \i ratproxy\i0  is there for a reason. It is designed specifically to deliver concise reports that focus on prioritized issues of clear relevance to contemporary \i web 2.0\i0  applications, and to do so in a hands-off, repeatable manner. It should not overwhelm you with raw HTTP traffic dumps, and it goes far beyond simply providing a framework to tamper with the application by hand. \par
\i Ratproxy\i0  implements a number of fairly advanced and unique checks based on our experience with these applications, as well as all the related browser quirks and content handling oddities. It features a sophisticated content-sniffing functionality capable of distinguishing between stylesheets and Javascript code snippets, supports SSL man-in-the-middle, on the fly Flash ActionScript decompilation, and even offers an option to confirm high-likelihood flaw candidates with very lightweight, a built-in active testing module. \par
Last but not least, if you are undecided, the proxy may be easily chained with third-party security testing proxies of your choice. \par
\b How does it avoid false positives?\par
\b0 Operating in a non-disruptive mode makes the process of discovering security flaws particularly challenging, as the presence of some vulnerabilities must be deduced based on very subtle, not always reliable cues - and even in active testing modes, \i ratproxy\i0  strives to minimize the amount of rogue traffic generated, and side effects caused. \par
The set of checks implemented by \i ratproxy\i0  is outlined later on - but just as importantly, underneath all the individual check logic, the proxy uses a number of passively or semi-passively gathered signals to more accurately prioritize reported problems and reduce the number of false alarms as much as possible. The five core properties examined for a large number of checks are: \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\f0\fs18 What the declared and actually detected MIME type for the document is. This is a fairly important signal, as many problems manifest themselves only in presence of subtle mismatches between these two - whereas other issues need to be treated as higher or lower priority based on this data. More fundamentally, the distinction between certain classes of content - such as "renderables" that may be displayed inline by the browser - is very important to many checks. \par
\f1\fs20\'b7\tab\f0\fs18 How pages respond to having cookie-based authentication removed. This provides useful information on whether the resource is likely to contain user-specific data, amongst other things. Carefully preselected requests that fail some security checks are replayed as-is, but with authentication data removed; responses are then compared, with virtually no risk of undesirable side effects in common applications. \par
\f1\fs20\'b7\tab\f0\fs18 Whether requests seem to contain non-trivial, sufficiently complex security tokens, or other mechanisms that may make the URL difficult to predict. This provides information needed to determine the presence of XSRF defenses, to detect cross-domain token leakage, and more. (In active testing mode, the function of such tokens is further validated by replaying the request with modified values.) \par
\f1\fs20\'b7\tab\f0\fs18 Whether any non-trivial parts of the query are echoed back in the response, and in what context. This is used to pick particularly interesting candidates for XSS testing - or, in active mode, to schedule low-overhead, lightweight probes. \par
\f1\fs20\'b7\tab\f0\fs18 Whether the interaction occurs on a boundary of a set of domains defined by runtime settings as the trusted environment subjected to the audit, and the rest of the world. Many boundary behaviors have a special significance, as they outline cross-domain trust patterns and information disclosure routes. \par
\pard\sb100\sa100 In addition to this, several places employ check-specific logic to further fine-tune the results. \par
\b What specific tests are implemented?\par
\b0 Key low-level check groups implemented by \i ratproxy\i0  are: \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 Potentially unsafe JSON-like responses that may be vulnerable to cross-domain script inclusion.\b0  JSON responses may be included across domains by default, unless safe serialization schemes, security tokens, or parser breaking syntax is used. \i Ratproxy\i0  will check for these properties, and highlight any patterns of concern. \par
\f1\fs20\'b7\tab\b\f0\fs18 Bad caching headers on sensitive content.\b0  \i Ratproxy\i0  is able to accurately detect presence of several types of sensitive documents, such as locations that return user-specific data, or resources that set new, distinctive cookies. If the associated requests have predictable URLs, and lack HTTP caching directives that would prevent proxy-level caching, there is a risk of data leakage. \par
\pard In pedantic mode, \i ratproxy\i0  will also spot differences in HTTP/1.1 and HTTP/1.0 caching intents - as these may pose problems for a fraction of users behind legacy cache engines (such as several commercial systems used to date by some corporations). \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 Suspicious cross-domain trust relationships.\b0  Based on the observation of dynamic control flow, and a flexible definition of trusted perimeter, ratproxy is capable of accurately detecting dangerous interactions between domains, including but not limited to: \par
\pard\fi-360\li1440\sb100\sa100\tx1440\f2\fs20 o\tab\f0\fs18 Security token leakage via Referer headers, \par
\pard\fi-360\li1440\sb100\sa100\f2\fs20 o\tab\f0\fs18 Untrusted script or stylesheet inclusion, \par
\f2\fs20 o\tab\f0\fs18 General references to third-party domains, \par
\f2\fs20 o\tab\f0\fs18 Mixed content issues in HTTPS-only applications, \par
\f2\fs20 o\tab\f0\fs18 Tricky cross-domain POST requests in single sign-on systems. \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 Numerous classes of content serving issues\b0  - a broad class of problems that lead to subtles XSSes, and includes MIME type mismatches, charset problems, Flash issues, and more. Research indicates that a vast number of seemingly minor irregularities in content type specifications may trigger cross-site scripting in unusal places; for example, subtle mistakes such as serving GIF files as image/jpeg, typing utf8 instead of utf-8 in Content-Type headers, or confusing HTTP charset with XML declaration charset values are all enough to cause trouble. Even seemingly harmless actions such as serving valid, attacker-controlled PNG images inline were known to cause problems due to browser design flaws. \par
\pard Likewise, certain syntax patterns are dangerous to return to a browser regardless of MIME types, as there are known methods to have MIME types overridden or ignored altogether. \i Ratproxy\i0  uses a set of fairly advanced checks that spot these problems with a considerable accuracy and relatively few false positives in contemporary scenarios, accounting for various classes of content served. \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 Queries with insufficient XSRF defenses\b0  (POSTs, plus any requests that set cookies by default; and other suspicious looking GET requests as an option). In active testing mode, the proxy will also actually try to validate XSRF protections by replaying requests with modified token values, and comparing responses. \par
\f1\fs20\'b7\tab\b\f0\fs18 Suspected or confirmed XSS / data injection vectors\b0 , including attacks through included JSON-based script injection, or response header splitting. In the default, passive mode, \i ratproxy\i0  does not attempt to confirm the quality of XSS filtering in tested applications, but it will automatically enumerate and annotate the best subjects for manual inspection - and will offer the user the ability to feed this data to external programs, or modify and replay interesting requests on the fly. The proxy will also take note of any seemingly successful manual XSS attempts taken by the user. \par
\pard In active testing mode, the proxy will go one step further and attempt a single-shot verification of XSS filtering mechanisms, carefully tweaking only these request parameters that truly need to be tested at the time (and carefully preserving XSRF tokens, and more). \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 HTTP and META redirectors.\b0  Redirectors, unless properly locked down, may be used without owner's content, which in some contexts might be considered undesirable. Furthermore, in extreme cases, poorly implemented redirectors may open up cross-site scripting vectors in less common browsers. \par
\pard\i Ratproxy\i0  will take note of any redirectors observed for further testing. \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\b\f0\fs18 A broad set of other security problems\b0 , such as alarming Javascript, OGNL, Java, SQL statements, file inclusion patterns, directory indexes, server errors, and so forth. \i Ratproxy\i0  will preselect particularly interesting candidates for further testing. \par
\pard In the initial beta, not all web technologies may necessarily be analyzed to greatest extent possible. We intend to actively extend and improve the tool based on your feedback, however. \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\f0\fs18 Several additional, customizable classes of requests and responses useful in understanding the general security model of the application (file upload forms, POST requests, cookie setters, etc). \par
\pard\sb100\sa100 For a full list of individual issues reported, please see messages.list in the source tarball. \par
\b What is the accuracy of reported findings?\par
\b0\i Ratproxy\i0  usually fares very well with typical, rich, modern web applications - that said, by the virtue of operating in passive mode most of the time, all the findings reported merely highlight areas of concern, and are not necessarily indicative of actual security flaws. The information gathered during a testing session should be then interpreted by a security professional with a good understanding of the common problems and security models employed in web applications. \par
Please keep in mind that the tool is still in beta, and you may run into problems with technologies we had no chance to examine, or that were not a priority at this time. Please contact the author to report any issues encountered. \par
\b How to interpret and address the issues reported?\par
\b0 Many of the problems reported by \i ratproxy\i0  are self-explanatory and straightforward to address. Some challenges, however, might require a more in-depth analysis to fully qualify and resolve. \par
There are several organizations that put a considerable effort into documenting and explaining these problems, and advising the public on how to address them. We encourage you to refer to the materials published by {\field{\*\fldinst{HYPERLINK "http://www.owasp.org/" }}{\fldrslt{\cf1\ul OWASP}}}\cf0\ulnone\f0\fs18  and {\field{\*\fldinst{HYPERLINK "http://www.webappsec.org/projects/articles/" }}{\fldrslt{\cf1\ul Web Application Security Consortium}}}\cf0\ulnone\f0\fs18 , amongst others: \par
\pard\fi-360\li720\sb100\sa100\tx720\f1\fs20\'b7\tab\f0\fs18{\field{\*\fldinst{HYPERLINK "http://www.owasp.org/index.php/Category:Principle" }}{\fldrslt{\cf1\ul OWASP Engineering principles}}}\cf0\ulnone\f0\fs18  \par
\pard\fi-360\li720\sb100\sa100\f1\fs20\'b7\tab\f0\fs18{\field{\*\fldinst{HYPERLINK "http://www.owasp.org/index.php/Category:OWASP_Guide_Project" }}{\fldrslt{\cf1\ul OWASP guidelines}}}\cf0\ulnone\f0\fs18  \par
\f1\fs20\'b7\tab\f0\fs18{\field{\*\fldinst{HYPERLINK "http://www.webappsec.org/projects/articles/" }}{\fldrslt{\cf1\ul WASC article library}}}\cf0\ulnone\f0\fs18  \par
\pard\sb100\sa100\b How to run the proxy?\par
\pard NOTE:\b0  Please do not be evil. Use \i ratproxy\i0  only against services you own, or have a permission to test. Keep in mind that although the proxy is mostly passive and unlikely to cause disruptions, it is not stealth. Furthermore, the proxy is not designed for dealing with rogue and misbehaving HTTP servers and clients - and offers no guarantees of safe (or sane) behavior there. \par
\pard\sb100\sa100 Initiating \i ratproxy\i0  sessions is fairly straigtforward, once an appropriate set of runtime options is dediced upon. Please familiarize yourself with these settings, as they have a very significant impact on the quality of produced reports. \par
The main binary, ./ratproxy, takes the following arguments: \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\~ -w logfile \~ \~- this option causes raw, machine-readable proxy logs to be written to\line\~ \~ \~ \~ \~ \~ \~ \~ \~ a specified file. By default, all data is written to stdout only. \line\~ \~ \~ \~ \~ \~ \~ \~ \~ The log produced this way is not meant for human \~consumption - it\line\~ \~ \~ \~ \~ \~ \~ \~ \~ might be postprocessed with third-party utilities, or pretty-printed \line\~ \~ \~ \~ \~ \~ \~ \~ \~ using 'ratproxy-report.sh', however.\line\line\~ -v logdir \~ \~ - prompts ratproxy to store full HTTP traces of all requests featured\line\~ \~ \~ \~ \~ \~ \~ \~ \~ in the logfile, writing them to a specified directory. In most cases, \line\~ \~ \~ \~ \~ \~ \~ \~ \~ it is advisable to enable this option, as it provides useful hints \line\~ \~ \~ \~ \~ \~ \~ \~ \~ for further analysis.\line\line\~ -p port \~ \~ \~ - causes ratproxy to listen for browser connections on a TCP port\line\~ \~ \~ \~ \~ \~ \~ \~ \~ different than the default 8080.\line\line\~ -r \~ \~ \~ \~ \~ \~- instructs ratproxy to accept remote connections. By default, the proxy\line\~ \~ \~ \~ \~ \~ \~ \~ \~ listens on loopback interfaces only. This option enables remote access \line\~ \~ \~ \~ \~ \~ \~ \~ \~ to the service.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ WARNING: Ratproxy does not feature any specific access control \line\~ \~ \~ \~ \~ \~ \~ \~ \~ mechanisms, and may be abused if exposed to the Internet. Please make \line\~ \~ \~ \~ \~ \~ \~ \~ \~ sure to use proper firewall controls whenever using -r option to \line\~ \~ \~ \~ \~ \~ \~ \~ \~ prevent this.\line\line\~ -d domain \~ \~ - specifies a domain name suffix used to distinguish between the audited \line\~ \~ \~ \~ \~ \~ \~ \~ \~ infrastructure and third-party sites. Host names that match -d values \line\~ \~ \~ \~ \~ \~ \~ \~ \~ will be subjected to analysis, and ones that do not will be considered \line\~ \~ \~ \~ \~ \~ \~ \~ \~ the outside world. Interactions between these two classes will be \line\~ \~ \~ \~ \~ \~ \~ \~ \~ subjected to additional checks.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ NOTE: This feature is extremely important for several of the checks \line\~ \~ \~ \~ \~ \~ \~ \~ \~ implemented by ratproxy. If -d option is missing, ratproxy will treat \line\~ \~ \~ \~ \~ \~ \~ \~ \~ all URLs as being a part of the audited service, and cross-domain \line\~ \~ \~ \~ \~ \~ \~ \~ \~ interaction checks will not be carried out at all. If it is set\line\~ \~ \~ \~ \~ \~ \~ \~ \~ incorrectly, report coverage may decrease.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Multiple -d options may and often should be combined to define the \line\~ \~ \~ \~ \~ \~ \~ \~ \~ perimeter for testing and flow analysis (e.g., -d example.com -d\line\~ \~ \~ \~ \~ \~ \~ \~ \~ example-ads-service.com -d example-ng.com).\line\line\~ -P host:port \~- causes ratproxy to talk to an upstream proxy instead of directly \line\~ \~ \~ \~ \~ \~ \~ \~ \~ routing requests to target services. Useful for testing systems behind \line\~ \~ \~ \~ \~ \~ \~ \~ \~ corporate proxies, or chaining \~multiple proxy-type security testing\line\~ \~ \~ \~ \~ \~ \~ \~ \~ tools together.\line\line\~ -l \~ \~ \~ \~ \~ \~- ratproxy sometimes needs to tell if a page has substantially changed \line\~ \~ \~ \~ \~ \~ \~ \~ \~ between two requests to better qualify the risks associated with some \line\~ \~ \~ \~ \~ \~ \~ \~ \~ observations. By default, this is achieved through strict page \line\~ \~ \~ \~ \~ \~ \~ \~ \~ checksum comparison (MD5). This options enables an alternative, \line\~ \~ \~ \~ \~ \~ \~ \~ \~ relaxed checking mode that relies on page length comparison instead.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Since some services tend to place dynamically generated tokens on \line\~ \~ \~ \~ \~ \~ \~ \~ \~ rendered pages, it is generally advisable to enable this mode most\line\~ \~ \~ \~ \~ \~ \~ \~ \~ of the time.\line\line\~ -2 \~ \~ \~ \~ \~ \~- several services are known to render the same page with dynamic content \line\~ \~ \~ \~ \~ \~ \~ \~ \~ of variable length in response to two subsequent, otherwise identical \line\~ \~ \~ \~ \~ \~ \~ \~ \~ requests. This might be a result of inline ad rendering, or other \line\~ \~ \~ \~ \~ \~ \~ \~ \~ content randomization.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ When dealing with such services, ratproxy might be instructed to \line\~ \~ \~ \~ \~ \~ \~ \~ \~ acquire three, not two, samples for page comparison for some checks,\line\~ \~ \~ \~ \~ \~ \~ \~ \~ to further minimize the number of false positives.\line\line\~ -e \~ \~ \~ \~ \~ \~- enables pedantic caching header validation. Security problems may arise\line\~ \~ \~ \~ \~ \~ \~ \~ \~ when documents clearly not meant to be cached are served in a way that \line\~ \~ \~ \~ \~ \~ \~ \~ \~ permits public proxies to store them. By default, ratproxy detects \line\~ \~ \~ \~ \~ \~ \~ \~ \~ poorly chosen HTTP/1.1 caching directives that are most likely to \line\~ \~ \~ \~ \~ \~ \~ \~ \~ affect general population.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Some additional issues may appear with users behind legacy proxies\line\~ \~ \~ \~ \~ \~ \~ \~ \~ that support HTTP/1.0 only, however - as is the case with several \line\~ \~ \~ \~ \~ \~ \~ \~ \~ commercial solutions. These proxies may ignore HTTP/1.1 directives and \line\~ \~ \~ \~ \~ \~ \~ \~ \~ interpret HTTP/1.0 cues only. In -e mode, ratproxy will complain about\line\~ \~ \~ \~ \~ \~ \~ \~ \~ all cases where there appears to be a mismatch between HTTP/1.0 and \line\~ \~ \~ \~ \~ \~ \~ \~ \~ HTTP/1.1 caching intents.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This tends to generate a large number of warnings for many services;\line\~ \~ \~ \~ \~ \~ \~ \~ \~ if you prefer to focus on more pressing issues first, you might want to\line\~ \~ \~ \~ \~ \~ \~ \~ \~ keep it off at first.\line\line\~ -x \~ \~ \~ \~ \~ \~- tells the proxy to log all URLs that seem to be particularly\line\~ \~ \~ \~ \~ \~ \~ \~ \~ well-suited for further, external XSS testing (by the virtue of being\line\~ \~ \~ \~ \~ \~ \~ \~ \~ echoed on the page in a particular manner). By default, ratproxy will \line\~ \~ \~ \~ \~ \~ \~ \~ \~ not actually attempt to confirm these vectors (-X option enables \line\~ \~ \~ \~ \~ \~ \~ \~ \~ disruptive checking, however) - but you will be able to use the data\line\~ \~ \~ \~ \~ \~ \~ \~ \~ for manual testing or as input to third-party software.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Generally recommended, unless it proves to be too noisy.\line\line\~ -t \~ \~ \~ \~ \~ \~- by default, ratproxy logs some of the most likely directory traversal \line\~ \~ \~ \~ \~ \~ \~ \~ \~ candidates. This option tells the proxy to log less probable guesses, \line\~ \~ \~ \~ \~ \~ \~ \~ \~ too. These are good leads for manual testing or as input to an \line\~ \~ \~ \~ \~ \~ \~ \~ \~ external application.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Generally recommended, unless it proves to be too noisy.\line\line\~ -i \~ \~ \~ \~ \~ \~- with this option supplied, ratproxy will log all PNG files served \line\~ \~ \~ \~ \~ \~ \~ \~ \~ inline. PNG files are a cross-site scripting vector in some legacy\line\~ \~ \~ \~ \~ \~ \~ \~ \~ browsers. The default behavior is to log these images that require \line\~ \~ \~ \~ \~ \~ \~ \~ \~ authentication only, based on the assumption that such images are most \line\~ \~ \~ \~ \~ \~ \~ \~ \~ likely to be user-controlled.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This option should be enabled when auditing applications that permit \line\~ \~ \~ \~ \~ \~ \~ \~ \~ picture uploads and sharing; otherwise, it may just generate noise.\line\line\~ -f \~ \~ \~ \~ \~ \~- with this option enabled, the proxy will log all Flash applications \line\~ \~ \~ \~ \~ \~ \~ \~ \~ encountered for further analysis. This is particularly useful when \line\~ \~ \~ \~ \~ \~ \~ \~ \~ combined with -v, in which case, Flash files will be automatically \line\~ \~ \~ \~ \~ \~ \~ \~ \~ disassembled and conveniently included in 'ratproxy-report.sh' output.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ Since recent Flash vulnerabilities make the platform a major \line\~ \~ \~ \~ \~ \~ \~ \~ \~ potential cross-site scripting vector, it is advisable to enable this\line\~ \~ \~ \~ \~ \~ \~ \~ \~ feature.\line\line\~ -s \~ \~ \~ \~ \~ \~- tells ratproxy to log all POST requests for further analysis and \line\~ \~ \~ \~ \~ \~ \~ \~ \~ processing, in a separate section of the final report. This is useful \line\~ \~ \~ \~ \~ \~ \~ \~ \~ for bookkeeping and manual review, since POST features are particularly \line\~ \~ \~ \~ \~ \~ \~ \~ \~ likely to expose certain security design flaws.\line\line\~ -c \~ \~ \~ \~ \~ \~- enables logging of all URLs that seem to set cookies, regardless of \line\~ \~ \~ \~ \~ \~ \~ \~ \~ their presumed security impact. Again, useful for manual design \line\~ \~ \~ \~ \~ \~ \~ \~ \~ analysis and bookkeeping. Not expected to contribute much noise to\line\~ \~ \~ \~ \~ \~ \~ \~ \~ the report.\line\line\~ -g \~ \~ \~ \~ \~ \~- extends XSRF token validation checks to GET requests. By default, the \line\~ \~ \~ \~ \~ \~ \~ \~ \~ proxy requires anti-XSRF protection on POST requests and cookie\line\~ \~ \~ \~ \~ \~ \~ \~ \~ setters only. Some applications tend to perform state changing \line\~ \~ \~ \~ \~ \~ \~ \~ \~ operations via GET requests, too, and so with this option enabled, \line\~ \~ \~ \~ \~ \~ \~ \~ \~ additional data will be collected and analyzed.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This feature is verbose, but useful for certain application designs.\line\line\~ -j \~ \~ \~ \~ \~ \~- enables detection of discouraged Javascript syntax, such as eval() \line\~ \~ \~ \~ \~ \~ \~ \~ \~ calls or .innerHTML operations. Javascript code that makes use of \line\~ \~ \~ \~ \~ \~ \~ \~ \~ these will be tagged for manual inspection.\line\line\~ -m \~ \~ \~ \~ \~ \~- enables logging of "active" content referenced across domain boundaries\line\~ \~ \~ \~ \~ \~ \~ \~ \~ to detect patterns such as remote image inclusion or remote linking\line\~ \~ \~ \~ \~ \~ \~ \~ \~ (note that logging of remote script or stylesheet inclusion is enabled \line\~ \~ \~ \~ \~ \~ \~ \~ \~ at all times).\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This option has an effect only when a proper set of domains is \line\~ \~ \~ \~ \~ \~ \~ \~ \~ specified with -d command-line parameter - and is recommended for sites\line\~ \~ \~ \~ \~ \~ \~ \~ \~ where a careful control of cross-domain trust relationships needs to\line\~ \~ \~ \~ \~ \~ \~ \~ \~ be ensured.\line\line\~ -X \~ \~ \~ \~ \~ \~- enables active testing. When this option is provided, ratproxy will \line\~ \~ \~ \~ \~ \~ \~ \~ \~ attempt to actively, disruptively validate the robustness of XSS\line\~ \~ \~ \~ \~ \~ \~ \~ \~ and XSRF defenses whenever such a check is deemed necessary. By the \line\~ \~ \~ \~ \~ \~ \~ \~ \~ virtue of doing passive preselection, this does not generate excessive \line\~ \~ \~ \~ \~ \~ \~ \~ \~ traffic and maintains the same level of coverage as afforded in passive\line\~ \~ \~ \~ \~ \~ \~ \~ \~ mode.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ The downside is that these additional requests may disrupt the \line\~ \~ \~ \~ \~ \~ \~ \~ \~ application or even trigger persistent problems; as such, please \line\~ \~ \~ \~ \~ \~ \~ \~ \~ exercise caution when using it against mission-critical production\line\~ \~ \~ \~ \~ \~ \~ \~ \~ systems.\line\line\~ -C \~ \~ \~ \~ \~ \~- in disruptive testing mode, ratproxy will replay some requests with \line\~ \~ \~ \~ \~ \~ \~ \~ \~ modified parameters. This may disrupt the state of some applications \line\~ \~ \~ \~ \~ \~ \~ \~ \~ and make them difficult to navigate. \~To remediate this, -C option \line\~ \~ \~ \~ \~ \~ \~ \~ \~ enables additional replaying of the unmodified request at the end of \line\~ \~ \~ \~ \~ \~ \~ \~ \~ the process, in hopes of restoring the original server-side state.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This option is generally recommended in -X mode.\line\line\~ -k \~ \~ \~ \~ \~ \~- instructs ratproxy that the application is expected to use HTTPS \line\~ \~ \~ \~ \~ \~ \~ \~ \~ exclusively; any downgrades to HTTP will be reported and prioritized \line\~ \~ \~ \~ \~ \~ \~ \~ \~ depending on potential impact.\line\line\~ \~ \~ \~ \~ \~ \~ \~ \~ This option obviously makes sense only if the application is indeed \line\~ \~ \~ \~ \~ \~ \~ \~ \~ meant to use HTTPS and HTTPS only.\line\line\~ -a \~ \~ \~ \~ \~ \~- tells ratproxy to indiscriminately log all visited URLs. Useful for\line\~ \~ \~ \~ \~ \~ \~ \~ \~ assessing the coverage achieved.\par
\pard\sb100\sa100 In practice, for low verbosity reporting that looks for high-probability issues only, a good starting point is: \par
\pard ./ratproxy -v <outdir> -w <outfile> -d <domain> -lfscm \par
\pard\sb100\sa100 To increase verbosity and include output from some less specific checks, the following set of options is a good idea: \par
\pard ./ratproxy -v <outdir> -w <outfile> -d <domain> -lextifscgjm \par
\pard\sb100\sa100 For active testing, simply add -XC options as needed. \par
Once the proxy is running, you need to configure your web browser to point to the appropriate machine and port (a simple Firefox extension such as {\field{\*\fldinst{HYPERLINK "https://addons.mozilla.org/en-US/firefox/addon/1557" }}{\fldrslt{\cf1\ul QuickProxy}}}\cf0\ulnone\f0\fs18  may come handy in the long run); it is advisable to close any non-essential browser windows and purge browser cache, as to maximize coverage and minimize noise. \par
The next step is to open the tested service in your browser, log in if necessary, then interact with it in a regular, reasonably exhaustive manner: try all available views, features, upload and download files, add and delete data, and so forth - then log out gracefully and terminate \i ratproxy\i0  with Ctrl-C. \par
\pard\b NOTE:\b0  Do not be tempted to tunnel automated spider traffic (e.g. wget -r or active scanners) via \i ratproxy\i0 . This will not have the desired effect. The tool depends strictly on being able to observe well-behaved, valid user-application interaction. \par
\b SECURITY WARNING:\b0  When interacting with SSL applications, \i ratproxy\i0  will substitute its own, dummy, self-signed certificate in place of that legitimately returned by the service. This is expected to generate browser warnings - click through them to accept the key temporarily for the site. Do not add the key permanently to your browser configuration - the key is known to anyone who ever downloaded the tool. Furthermore, please note that \i ratproxy\i0  will also forego any server certificate validation steps - so while interacting with the service in this mode, you can have no expectation of server identity, transmission integrity, or data privacy. Do not use important accounts and do not enter sensitive data while running \i ratproxy\i0  tests. \par
\pard\sb100\sa100 Once the proxy is terminated, you may further process its pipe-delimited (|), machine-readable, greppable output with third party tools if so desired, then generate a human-readable HTML report: \par
\pard ./ratproxy-report.sh ratproxy.log >report.html \par
\pard\sb100\sa100 This will produce an annotated, prioritized report with all the identified issues. When opened in a browser, you will have an opportunity to replay GET and POST requests, tweak their parameters, view traces, and inspect Flash disassemblies, too. \par
Enjoy :-) \par
\b Credits, contributions, suggestions\par
\b0 If you are interested in contributing to the project, a list of features and improvements for the proxy can be found in doc/TODO in the source tarball. \par
\pard If you have any questions, suggestions, or concerns regarding the application, the author can be reached at {\field{\*\fldinst{HYPERLINK "mailto:lcamtuf@google.com" }}{\fldrslt{\cf1\ul lcamtuf@google.com}}}\cf0\ulnone\f0\fs18 . \par
\par
Ratproxy was made possible by the contributions of, and valuable feedback from, Google's information security engineering team. \par
\par
--\par
\par
\par
Comment by {\field{\*\fldinst{HYPERLINK "http://code.google.com/u/lcamtuf/" }}{\fldrslt{\cf1\ul lcamtuf}}}\cf0\ulnone\f0\fs18 , Jul 10, 2008 \par
\pard\sb100\sa100 The comment area for this document evolved into a general discussion forum, so I decided to lock it down - and to provide some hopefully useful pointers instead: \par
1) \i Ratproxy\i0  can be compiled with make and requires a reasonably configured build environment similar to what is required for any other application. It does not depend on any arcane libraries or non-standard tools; you might have to remove the -Wno-pointer-sign from Makefile on older systems, but that's about it. If you still need help setting up such an environment and running \i ratproxy\i0  on Windows, there is a nice third-party guide prepared by David Marginian ({\field{\*\fldinst{HYPERLINK "http://butterdev.com/web-security/2008/07/google-ratproxy-web-application-security-audit-tool/" }}{\fldrslt{\cf1\ul part 1}}}\cf0\ulnone\f0\fs18 , {\field{\*\fldinst{HYPERLINK "http://butterdev.com/dwr/2008/07/google-ratproxy-part-2-running-and-using-ratproxy/" }}{\fldrslt{\cf1\ul part 2}}}\cf0\ulnone\f0\fs18 ). \par
Please be advised, however, that \i ratproxy\i0  is not meant to be a point-and-click tool - if you have a difficulty running it in the first place, you may also have a hard time understanding its output and verifying it. \par
2) There is no plan to provide official, standalone binary builds for the program. On Windows, this is not very feasible, as a fully featured runtime environment is required for ratproxy-report.sh. On Linux and BSD flavors, you can request your vendor to provide binary packages for \i ratproxy\i0 ; I am aware of such work already taking place for Debian and FreeBSD. \par
3) If you need help understanding security problem classes analyzed by \i ratproxy\i0 , please refer to the links provided in the \i "How to interpret and address the issues reported"\i0  section above. Although I am happy to diagnose problems with the proxy itself, I generally cannot review or patch your applications on your behalf. \par
4) If you have any specific usage questions not answered in the documentation, suggestions for features and improvements, or just general feedback - please {\field{\*\fldinst{HYPERLINK "mailto:lcamtuf@google.com" }}{\fldrslt{\cf1\ul contact me directly}}}\cf0\ulnone\f0\fs18 . Likewise, if you want to contribute your code to the project, please let me know. \par
5) If you just want to quickly report a bug, please proceed to {\field{\*\fldinst{HYPERLINK "http://code.google.com/p/ratproxy/issues/list" }}{\fldrslt{\cf1\ul this page}}}\cf0\ulnone\f0\fs18  and open an issue. \par
\pard\nowidctlpar\par
}
 