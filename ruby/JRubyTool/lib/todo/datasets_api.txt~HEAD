require 'net/http'
require 'uri'
require 'rexml/document'
require 'jxml'


ALL_TYPES_DATASET_XML  = File.new(File.dirname(__FILE__) + "/all_types_dataset.xml").read
#xml = REXML::Document.new ALL_TYPES_DATASET_XML
#puts xml
#xml = JXML::Document.new ALL_TYPES_DATASET_XML
#puts "haha", xml.to_xml


#=begin

begin
  url = URI.parse('http://localhost:3000/datasets_api/create')
  req = Net::HTTP.new(url.path)
#  req = Net::HTTP::Post.new(url.path)
  req.basic_auth 'wxiong', 'CorianderSageSaffron'

  #req.env['RAW_POST_DATA'] = ALL_TYPES_DATASET_XML
  #req.env['HTTP_CONTENT_TYPE'] = 'text/xml'

  #req.body = ALL_TYPES_DATASET_XML
  req.set_content_type('text/xml')
#  req.set_form_data({ 'RAW_POST_DATA' => ALL_TYPES_DATASET_XML})

  res = Net::HTTP.new(url.host, url.port).start { |http| http.post(req, ALL_TYPES_DATASET_XML) }
  
  case res
  when Net::HTTPSuccess, Net::HTTPRedirection
    # OK
    puts res.inspect
    puts res.body
  else
    puts res.error!
  end
rescue Exception => e
  puts e, e.backtrace.join("\n")
end
#=end


#url = "http://localhost:3000/datasets_api/index/HjRFGTVCjAiybr-fEqK502"
#result = Net::HTTP.get(URI(url))
#puts result
#puts ALL_TYPES_DATASET_XML

=begin
    @request.env['RAW_POST_DATA'] = ALL_TYPES_DATASET_XML
    @request.env['HTTP_CONTENT_TYPE'] = 'text/xml'
    authorize
    post :create    
    assert_response :success
    
    #e.g. http://test.host/v1/datasets/gBsCfeoQh7qW_OEx4CoH0w
    #puts @response.headers['Location'] 
    
    created_dataset_id = id_from_location_header
    
    # clear state explicity to set up a new independent request. Note this is called automatically by the framework
    # at the start of each test.
    setup        
    authorize
    get :show, {:id => created_dataset_id}
    assert_response :success
    
    #verify that round-tripping will produce the same dataset XML in this case, with the exception of 
    #a modified id and created_on attributes for the dataset element
    created_dataset = Dataset.find(created_dataset_id)
    created_dataset_on = created_dataset.created_on.strftime("%Y-%m-%dT%H:%M:%S")    
    updated_xml = ALL_TYPES_DATASET_XML.sub(/id=".*?"/, "id=\"#{created_dataset_id}\"").
                  sub!(/created_on=".*?"/, "created_on=\"#{created_dataset_on}\"")   
    assert_equal updated_xml, @response.body   
  end

=end


  
