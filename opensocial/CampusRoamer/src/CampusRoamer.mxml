<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	layout="absolute" creationComplete="init()" xmlns:ns1="bridge.*">
	<mx:Style>
		.text {
			color: #222222;
			font-family: Verdana;
		}
	</mx:Style>

	<fc:SpringGraph id="s" backgroundColor="#ffffff" 
		lineColor="#333388" left="0" right="0" top="0" bottom="0"
		itemRenderer="PersonItemView" repulsionFactor="{rep.value}">
	</fc:SpringGraph>
	
	<mx:Label x="10" y="10" text="Campus Roamer" styleName="text" fontSize="15"/>
	<mx:Text fontSize="9" textAlign="left" styleName="text"
		htmlText="&lt;a href=&quot;http://apps.xiaonei.com/campus_roamer&quot;&gt;http://apps.xiaonei.com/campus_roamer&lt;/a&gt;" x="10" y="32"/>
		
	<mx:Label x="10" y="48" text="Double-click an Person to see his/her friends" fontSize="10" styleName="text" id="help0"/>
	<mx:Label x="10" y="64" text="Right-click to navigate his/her profile page" fontSize="10" styleName="text" id="help1"/>
			
	<mx:HSlider x="270" y="9" value="1.0" minimum="0.05" maximum="1.5" liveDragging="true" change="scaleFactor = event.currentTarget.value; s.refresh();" width="101"/>
	<mx:Label x="379" y="10" text="zoom in/out thumbnail size"/>
	<mx:HSlider id="rep" x="270" y="28" value="0.4" minimum="0.05" maximum="1.5" liveDragging="true" change="s.refresh();" width="101"/>
	<mx:Label x="379" y="28" text="modify distance between people"/>
			
	<mx:TextArea id="output" x="300" y="10" width="450" height="100" visible="false"/>
	<mx:XML id="samplePerson" source="samplePerson.xml" />
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.managers.CursorManagerPriority;
			import mx.managers.CursorManager;
			import com.google.ccc.chinasocial.api.API;
			import mx.controls.Alert;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			
			[Bindable]
            [Embed(source="progress_loader_15x15px.swf")]
            public var inProgressCursor:Class;
					
			[Bindable]
			public var scaleFactor: Number = 0.618;
			private var items: Graph;
			
			private var api:API;
			private var initProgressWindow:InitialProgressWindow;
			
			private function init(): void {
				initProgressWindow = new InitialProgressWindow();
				PopUpManager.addPopUp(initProgressWindow, this, true);
				PopUpManager.centerPopUp(initProgressWindow);	
							
				items = new Graph();
				
	            checkInitialStatus("Check JavaScript: ");
	            
	            if (ExternalInterface.available) {
	                try {
						ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);
						
	                    if (checkJavaScriptReady()) {
	                        outputText("JavaScript is ready.\n");
	                        
						     api = new API(["sample"]);
						     api.setDesiredFetchPeopleFields(["PROFILE_URL"]);
						     api.setDesiredFetchPeopleCount(20);
						     api.start(); 		
						     outputText("ExternalInterface is ready.\n");     	
	                    } 
	                    else {
	                        outputText("JavaScript is not ready, creating timer.\n");
	                        var readyTimer:Timer = new Timer(2000, 0);
	                        readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
	                        readyTimer.start();
	                    }
	                } 
	                catch (error:SecurityError) {
	                    outputText("A SecurityError occurred: " + error.message + "\n");
	                } 
	                catch (error:Error) {
	                    outputText("An Error occurred: " + error.message + "\n");
	                }
	            } 
	            else {
	                outputText("External interface is not available for this container.");
	            }
	            
	            // for test
	            test();
			}
			
			public function checkInitialStatus(text:String):void{
				if(initProgressWindow && initProgressWindow.parent && initProgressWindow.visible){
					initProgressWindow.traceStatus(text);
				}
			}
			
			public function removeInitProgressWindow():void{
				if(initProgressWindow){
					initProgressWindow.visible = false;
					PopUpManager.removePopUp(initProgressWindow);
				}
			}			
			
	        private function checkJavaScriptReady():Boolean {
	            var isReady:Boolean = ExternalInterface.call("isReady");
	            return isReady;
	        }	
	        
	        private function timerHandler(event:TimerEvent):void {
	            outputText("Checking JavaScript status...\n");
	            var isReady:Boolean = checkJavaScriptReady();
	            if (isReady) {
	                outputText("JavaScript is ready.\n");
	                Timer(event.target).stop();
	            }
	        }	   
	        
	        public function outputText(value:String):void {
	        	if(value.indexOf("\n") == -1) {
	        		value += "\n";
	        	}
	        	
	        	var text:String = output.text;
	        	text = text + value;
	        	output.text = text;
	        }    
	        
	        public function receivedFromJavaScript(value:String):void {
	        	// the first time to close init dialog
	        	setTimeout(removeInitProgressWindow, 1000);
	        	
	        	var person:XML = XML(value);
	        	var linkTo:PersonItem = addItem(person.id[0], person.name[0], person.thumbnail[0], null);
	        	outputText(person.id[0].toString() + ": " + person.name[0].toString());
	        	
	        	var friends:XMLList = person.friends.friend;
	        	var randomIndexes:Array = chooseRadmon10(friends.length());
	        	
	        	for each(var index:int in randomIndexes) {
	        		var friend:XML = friends[index];
	        		addItem(friend.id[0], friend.name[0], friend.thumbnail[0], linkTo);
	        		outputText(friend.id[0].toString() + ": " + friend.name[0].toString());
	        	}
	        	
	        	CursorManager.removeBusyCursor();
				CursorManager.removeAllCursors();
	        } 		
	        
	        private function chooseRadmon10(length:int):Array {
				var array:Array = [];
				var hitFlag:Dictionary = new Dictionary();
				
				if(length <= 10) {
					for(var i:int=0; i<length; i++) {
						array.push(i);
					}
				}
				else {
					for(i=0; i<10; i++) {
						var id:int;
						do {
							 id = Math.floor(Math.random()*length);
						} while(hitFlag[id]);
		
						array.push(id);
						hitFlag[id] = true;
					}
				}
				return array;
			}	        
			
			public function addItem(id: String, name: String, image:String, linkTo: PersonItem): PersonItem {
				var newItem: PersonItem = new PersonItem(id, name, image);
				items.add(newItem);
				if(linkTo != null) {
					items.link(newItem, linkTo);
				}
				s.dataProvider = items;
				return newItem;
			}
		
			public function createItems(items: XMLList, linkTo: PersonItem): void {
				for(var i: int = 0; i < items.length(); i++) {
					var friend:XML = items[i];
					var id:String = friend.id[0];
					var name:String = friend.name[0];
					addItem(id, name, null, linkTo);
				}
			}
			
			public function gotDoubleClick(): void {
//				help.visible = false;
			}
			
			private function test():void {	
				receivedFromJavaScript(samplePerson);										
			}
			
		]]>
	</mx:Script>
</mx:Application>
