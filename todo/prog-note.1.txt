ExternalInterface.call The markup in the document following the root element must be well-formed
1008	_ is ambiguous; Found more than one matching binding.
TypeError: Error #1088: The markup in the document following the root element must be well-formed.
	at flash.external::ExternalInterface$/call()
	at xcelsius.propertySheets.impl::PropertySheetExternalProxy/bind()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\classes\xcelsius\propertySheets\impl\PropertySheetExternalProxy.as:108]
	at IndicatorHelper/changeNameBinding()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\projects\propertySheets\GaugePropertySheet\IndicatorHelper.as:101]
	at GaugeChunk/onChangeNameBinding()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\projects\propertySheets\GaugePropertySheet\GaugeChunk.mxml:85]
	at GaugeChunk/___nameBinding_change()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\projects\propertySheets\GaugePropertySheet\GaugeChunk.mxml:247]
	at flash.events::EventDispatcher/dispatchEventFunction()
	at flash.events::EventDispatcher/dispatchEvent()
	at mx.core::UIComponent/dispatchEvent()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\classes\mx\core\UIComponent.as:8392]
	at xcelsius.propertySheets.controls::PropertyBindingButton/bindingCallBack()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\classes\xcelsius\propertySheets\controls\PropertyBindingButton.as:631]
	at xcelsius.propertySheets.controls::PropertyBindingButton/checkUserSelection()[D:\perforce\depot2\Trunk\PI\X6\Xcelsius\Flash\classes\xcelsius\propertySheets\controls\PropertyBindingButton.as:561]
	at Function/http://adobe.com/AS3/2006/builtin::apply()
	at flash.external::ExternalInterface$/_callIn()
	at <anonymous>()
	
A	10
B	20
C	30


shutdown -r ¨Cm \\shg-d-01-rshi -t 30

		public function addSeriesNameBindingValueChangeEventListener():void
		{
			var bindingID:String = nameBindId;
			if(StringUtil.notEmpty(bindingID))
				BindValueUtil.registerCellValueChangeCallback(bindingID,onBindingValueChange);
		}
		/**
		 * Update the series name when the binding value changed.
		 * @private
		 */		
		private function onBindingValueChange():void
		{
			var bindingID:String = nameBindId;
			if(StringUtil.notEmpty(bindingID))
				seriesName = BindValueUtil.toSingleton(bindingID);
		}
---
		_nameBinding.addEventListener("sheetChange", onSheetChange);
		}
		
		private function onSheetChange():void
		{
			Alert.show('hi');
		}

		if(_proxy)
			{
				var bindID:String = _nameBinding.binding;
				if(bindID)
				{
					_proxy.addBindingEventListener(bindID, onSheetChange);
					_proxy.registerBinding(bindID, _proxy.getBindingDisplayName(bindID));
				}
			}

		
		private function onSheetChange():void
		{
			Alert.show('hi');
		}

		
	 		public function set indicatorNames(array:Array):void
			{
				_indicatorNames = array;
			} 
			
			public function get indicatorNames():Array
			{
				return _indicatorNames;
			}

			for(var i:int=0; i<array.length && i<_indicatorHelper.indicators.length; i++)
			{
				var indicator:Indicator = _indicatorHelper.indicators[i] as Indicator;
				if(!indicator.nameBindId)
				{
					indicator.name = array[i];	
				}
			}
 			var array:Array = [];
			for(var i:int=0; i<_indicatorHelper.indicators.length; i++)
			{
				array.push(_indicatorHelper.indicators[i].name);
			}
			indicatorNames = array;	

			for(var i:int=0; i<array.length && i<_indicatorHelper.indicators.length; i++)
			{
				var indicator:Indicator = _indicatorHelper.indicators[i] as Indicator;
				if(!indicator.nameBindId)
				{
					indicator.name = array[i];	
				}
			}


			// persist data, used to display indicators' name
		private var _indicatorNames:Array;

		[Bindable]
 		public function set indicatorNames(array:Array):void
		{
			_indicatorNames = array;
			for(var i:int=0; i<array.length && i<_indicatorHelper.indicators.length; i++)
			{
				var indicator:Indicator = _indicatorHelper.indicators[i] as Indicator;
				if(!indicator.nameBindId)
				{
					indicator.name = array[i];	
				}
			}
		} 
		
		public function get indicatorNames():Array
		{
			return _indicatorNames;
		}
		
			// update persist data
 			var indicatorNames:Array = [];
			for(var i:int=0; i<_indicatorHelper.indicators.length; i++)
			{
				indicatorNames.push(_indicatorHelper.indicators[i].name);
			}
			this.indicatorNames = indicatorNames;			

		[Bindable]
		private var _indicatorNames:Array = [];
		
 		public function set indicatorNames(array:Array):void
		{
			_indicatorNames = array;
			
			for(var i:int=0; i<_indicatorNames.length && i<_indicatorHelper.indicators.length; i++)
			{
				(_indicatorHelper.indicators[i] as Indicator).name = array[i];
			}
		} 
		
		public function get indicatorNames():Array
		{
			return _indicatorNames;
		}
		
		private function onIndicatorsChange(event:Event):void
		{
			_indicatorNames = []
			for(var i:int=0; i<_indicatorHelper.indicators.length; i++)
			{
				_indicatorNames.push(_indicatorHelper.indicators[i].name);
			}			
		}