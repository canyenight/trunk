<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	layout="absolute" creationComplete="init()" xmlns:ns1="bridge.*">
	
	<mx:Style>
		.text {
			color: #222222;
			font-family: Verdana;
		}
	</mx:Style>
	
	<fc:SpringGraph id="s" backgroundColor="#ffffff" 
		lineColor="#333388" left="0" right="0" top="0" bottom="0"
		itemRenderer="PersonItemView" repulsionFactor="{rep.value}">
	</fc:SpringGraph>
	
	<mx:Label x="536" y="10" text="@Resource(bundle='resources', key='TIPS_DISTANCE')" fontSize="12" styleName="text" width="109"/>
	<mx:HSlider x="225" y="10" value="1.0" minimum="0.05" maximum="1.5" liveDragging="true" change="scaleFactor = event.currentTarget.value; s.refresh();" width="101"/>
	<mx:Label x="339" y="10" text="@Resource(bundle='resources', key='TIPS_ZOOM')"  fontSize="12" styleName="text" width="80"/>
	<mx:HSlider id="rep" x="427" y="10" value="0.4" minimum="0.05" maximum="1.5" liveDragging="true" change="s.refresh();" width="101"/>
	<mx:Button x="643"  y="9" label="@Resource(bundle='resources', key='RESET')" fontSize="11" styleName="text" click="reset()" width="105"/>
	
	<mx:Button id="_showBefore" x="530"  y="46" label="Before 10" fontSize="11" styleName="text" click="showBefore()" width="105" enabled="false"/>
	<mx:Button id="_showNext" x="643"  y="46" label="Next 10" fontSize="11" styleName="text" click="showNext()" width="105"/>
	
	<mx:Label x="10" y="10" text="@Resource(bundle='resources', key='CAMPUS_ROAMER')" styleName="text" fontSize="18" fontWeight="bold" width="208"/>
	<mx:Text fontSize="9" textAlign="left" styleName="text" x="10" y="32" useHandCursor="true" buttonMode="true" mouseChildren="false"
		text="http://apps.xiaonei.com/campus_roamer" click="gotoApplicationPage()"/>
		
	<mx:Label x="10" y="48" text="@Resource(bundle='resources', key='TIPS_DOUBLE_CLICK')" fontSize="12" styleName="text" id="help0"/>
	<mx:Label x="10" y="64" text="@Resource(bundle='resources', key='TIPS_RIGHT_CLICK')" fontSize="12" styleName="text" id="help1"/>
			
<!--	<mx:XML id="personsXML" source="personsByName.xml" />
-->	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import flash.net.navigateToURL;
			
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.managers.CursorManagerPriority;
			import com.google.ccc.chinasocial.api.API;
			import com.adobe.flex.extras.controls.springgraph.Graph;
			
			[Bindable]
            [Embed(source="progress_loader_15x15px.swf")]
            public var inProgressCursor:Class;
					
			[Bindable]
			public var scaleFactor: Number = 0.618;
			
			// spring graph
			private var items: Graph;
			
			// init progress popup window
			private var initProgressWindow:InitialProgressWindow;
			
			// display friends with pagination
			private const DISPLAY_COUNT:int = 10;
			private var currentPerson:PersonItem;
			private var currentFriends:XMLList;
			private var nextAvailable:int = 0;
			
			// undo/redo map
			private var existingPersons:Array = [];
			
			private function init(): void {
				initProgressWindow = new InitialProgressWindow();
				PopUpManager.addPopUp(initProgressWindow, this, true);
				PopUpManager.centerPopUp(initProgressWindow);	
							
				items = new Graph();
				
	            checkInitialStatus("Check JavaScript: ");
	            
				ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);
				
                if (checkJavaScriptReady()) {
				     new API(["sample"]).start();
				     ExternalInterface.call("loadFriends");
                } 
                else {
                    var readyTimer:Timer = new Timer(2000, 0);
                    readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
                    readyTimer.start();
                }
	            
	            // for test
	            test();
			}
			
			public function checkInitialStatus(text:String):void{
				if(initProgressWindow && initProgressWindow.parent && initProgressWindow.visible){
					initProgressWindow.traceStatus(text);
				}
			}
			
			public function removeInitProgressWindow():void{
				if(initProgressWindow){
					initProgressWindow.visible = false;
					PopUpManager.removePopUp(initProgressWindow);
				}
			}			
			
	        private function checkJavaScriptReady():Boolean {
	            return ExternalInterface.call("isReady");
	        }	
	        
	        private function timerHandler(event:TimerEvent):void {
	            if (checkJavaScriptReady()) {
	                Timer(event.target).stop();
	            }
	        }	   
	        
	        public function receivedFromJavaScript(value:String):void {
	        	// the first time to close init dialog
	        	setTimeout(removeInitProgressWindow, 1000);
	        	
	        	var person:XML = XML(value);
	        	currentPerson= addItem(person.id[0], person.name[0], person.thumbnail[0], null);
	        	existingPersons.push(currentPerson);
	        	trace(person.id[0].toString() + ": " + person.name[0].toString());
	        	
	        	currentFriends = person.friends.friend as XMLList;
	        	
	        	for(var i:int=0; i<DISPLAY_COUNT; i++) {
	        		var friend:XML = currentFriends[i];
	        		addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson);
	        	}
	        	nextAvailable += DISPLAY_COUNT;
	        	
	        	CursorManager.removeBusyCursor();
				CursorManager.removeAllCursors();
	        } 		
	        
			public function addItem(id: String, name: String, image:String, linkTo: PersonItem): PersonItem {
				var newItem: PersonItem = new PersonItem(id, name, image);
				items.add(newItem);
				if(linkTo != null) {
					items.link(newItem, linkTo);
				}
				s.dataProvider = items;
				return newItem;
			}
			
			public function gotDoubleClick(): void {
//				receivedFromJavaScript(personsXML.person[1]);
			}
			
			private function test():void {	
//				receivedFromJavaScript(personsXML.person[0]);										
			}
			
			private function gotoApplicationPage():void {
				navigateToURL(new URLRequest("http://apps.xiaonei.com/campus_roamer"), "_blank");
			}
			
			private function reset():void
			{
				ExternalInterface.call("reset");
				init();
			}
			
			private function showNext():void
			{
				clearCurrentLinked();
				var max:int = Math.min(nextAvailable+DISPLAY_COUNT, currentFriends.length())
	        	for(var i:int=nextAvailable; i<max; i++) {
	        		var friend:XML = currentFriends[i];
	        		addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson);
	        		nextAvailable++;
	        	}
				updateButtonStatus();
			}
			
			private function showBefore():void {
				clearCurrentLinked();
				var min:int = Math.max(nextAvailable-DISPLAY_COUNT, 0)
	        	for(var i:int=nextAvailable-1; i>min; i--) {
	        		var friend:XML = currentFriends[i];
	        		addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson);
	        		nextAvailable--;
	        	}
				updateButtonStatus();
			}
			
			private function clearCurrentLinked():void {
				for each(var item:PersonItem in items.nodes) {
					if(existingPersons.indexOf(item)==-1 && items.linked(currentPerson, item)) {
						items.remove(item);
					}
				}				
			}
			
			private function updateButtonStatus():void {
	        	if(nextAvailable+DISPLAY_COUNT>=currentFriends.length()) {
	        		_showNext.enabled = false;
	        	}
	        	else {
	        		_showNext.enabled = true;
	        	}	
	        	if(nextAvailable-DISPLAY_COUNT<0) {
	        		_showBefore.enabled = false;
	        	}	        	
	        	else {
	        		_showBefore.enabled = true;
	        	}	        				
			}
			
		]]>
	</mx:Script>
</mx:Application>
