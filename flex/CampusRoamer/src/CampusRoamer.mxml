<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:fc="com.adobe.flex.extras.controls.springgraph.*"
	creationComplete="onCreationComplete()" 
	layout="absolute">
	
	<mx:Style>
		.text {
			color: #222222;
			font-family: Verdana;
		}
	</mx:Style>
	
	<fc:SpringGraph id="s" backgroundColor="#ffffff" 
		lineColor="#333388" left="0" right="0" top="0" bottom="0"
		itemRenderer="PersonItemView" repulsionFactor="{rep.value}">
	</fc:SpringGraph>
		
	<mx:Label x="536" y="10" text="@Resource(bundle='resources', key='TIPS_DISTANCE')" fontSize="12" styleName="text" width="109"/>
	<mx:HSlider x="225" y="10" value="1.0" minimum="0.05" maximum="1.5" liveDragging="true" change="scaleFactor = event.currentTarget.value; s.refresh();" width="101"/>
	<mx:Label x="339" y="10" text="@Resource(bundle='resources', key='TIPS_ZOOM')"  fontSize="12" styleName="text" width="80"/>
	<mx:HSlider id="rep" x="427" y="10" value="0.4" minimum="0.05" maximum="1.5" liveDragging="true" change="s.refresh();" width="101"/>
	<mx:Button id="_showBefore" x="233" y="37" label="@Resource(bundle='resources', key='SHOW_NEXT')" fontSize="11" styleName="text" click="showBefore()" width="80" enabled="false"/>
	<mx:Button id="_showNext" x="321" y="37" label="@Resource(bundle='resources', key='SHOW_BEFORE')" fontSize="11" styleName="text" click="showNext()" width="74"/>
	<mx:Button x="408"  y="37" label="@Resource(bundle='resources', key='RESET')" fontSize="11" styleName="text" click="reset()" width="105"/>
	<mx:ComboBox id="_selectFavorites" x="521" y="37" dataProvider="{favorites}" width="150" color="0x000000" close="onCloseSelect(event);"/>
	
	<mx:Label x="10" y="10" text="@Resource(bundle='resources', key='CAMPUS_ROAMER')" styleName="text" fontSize="18" fontWeight="bold" width="208"/>
	<mx:Text fontSize="9" textAlign="left" styleName="text" x="10" y="32" useHandCursor="true" buttonMode="true" mouseChildren="false"
		text="http://apps.xiaonei.com/campus_roamer?9" click="gotoApplicationPage()"/>
		
	<mx:Label x="10" y="48" text="@Resource(bundle='resources', key='TIPS_DOUBLE_CLICK')" fontSize="12" styleName="text" id="help0"/>
	<mx:Label x="10" y="64" text="@Resource(bundle='resources', key='TIPS_RIGHT_CLICK')" fontSize="12" styleName="text" id="help1"/>

	<mx:XML id="personsXML" source="../test/personsByNameAll.xml" />

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import flash.net.navigateToURL;

			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.managers.CursorManagerPriority;
			
			// http://www.adobe.com/2006/fc/SpringGraph.swc
			import com.adobe.flex.extras.controls.springgraph.Graph;

			private var _test:Boolean = true;
			private var _autoClose:Boolean = false;

			[Bindable]
			[Embed(source="../libs/progress_loader_15x15px.swf")]
			public var inProgressCursor:Class;

			[Bindable]
			public var scaleFactor:Number = 0.618;

			// "http://roamer.heroku.com"
			// "http://127.0.0.1:3000"
			public static const SERVER_URL:String = "http://roamer.heroku.com";

			// spring graph
			private var items:Graph;

			// init progress popup window
			private var initProgressWindow:InitialProgressWindow;

			// users
			[Bindable]
			public var viewerID:String = null;
			private var currentPerson:PersonItem;

			// display friends with pagination
			private const DISPLAY_COUNT:int = 10;
			private var currentFriends:XMLList;
			private var page:Pagination;

			// undo/redo map
			private var latestAddPersons:Array = [];
			private var existingPersons:Dictionary = new Dictionary();

			[Bindable]
			public var favorites:ArrayCollection = new ArrayCollection([{label:"Select in favorites", data:0}]);

			private function onCreationComplete():void
			{
				items = new Graph();
				
				initProgressWindow = new InitialProgressWindow();
				PopUpManager.addPopUp(initProgressWindow, this, true);
				PopUpManager.centerPopUp(initProgressWindow);

				Security.allowDomain("*");
				ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);

				if (checkJavaScriptReady())
				{
					ExternalInterface.call("loadFriends");
				}
				else
				{
					var readyTimer:Timer = new Timer(2000, 0);
					readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
					readyTimer.start();
				}

				// for test
				if (_test)
				{
					receivedFromJavaScript(personsXML.person[0]);
				}
			}

			public function getFavorites():void
			{
				var url:String = CampusRoamer.SERVER_URL + "/favorites/list/" + viewerID;
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, onGetFavorites);
				loader.load(new URLRequest(url));
			}

			private function onGetFavorites(event:Event):void
			{
				var list:XML = new XML(event.target.data);
				var users:XMLList = list.user;

				var label:Object = favorites.removeItemAt(0);
				favorites.removeAll();
				favorites.addItem(label);

				for each(var user:XML in list.user)
				{
					favorites.addItem({label:user.name[0].toString(), data:user.uid[0].toString()});
				}

				_selectFavorites.open();
				_autoClose = true;

				// set timer to close combobox
				var readyTimer:Timer = new Timer(1500, 0);
				readyTimer.addEventListener(TimerEvent.TIMER, onAutoCloseSelect);
				readyTimer.start();
			}

			private function onAutoCloseSelect(event:TimerEvent):void
			{
				Timer(event.target).stop();
				_selectFavorites.close();
			}

			public function setBusyCursor():void
			{
				CursorManager.setCursor(this.inProgressCursor, CursorManagerPriority.HIGH, -8, -8);
				CursorManager.setBusyCursor();

				// set timer to remove busy cursor in 10s
				var readyTimer:Timer = new Timer(2000, 0);
				readyTimer.addEventListener(TimerEvent.TIMER, onSetBusyCursor);
				readyTimer.start();
			}

			private function onSetBusyCursor(event:TimerEvent):void
			{
				Timer(event.target).stop();
				CursorManager.removeBusyCursor();
				CursorManager.removeAllCursors();
			}

			public function removeInitProgressWindow():void
			{
				if (initProgressWindow)
				{
					initProgressWindow.visible = false;
					PopUpManager.removePopUp(initProgressWindow);
				}
			}

			private function checkJavaScriptReady():Boolean
			{
				return ExternalInterface.call("isReady");
			}

			private function timerHandler(event:TimerEvent):void
			{
				if (checkJavaScriptReady())
				{
					Timer(event.target).stop();
				}
			}

			public function receivedFromJavaScript(value:String):void
			{
				// the first time to close init dialog
				setTimeout(removeInitProgressWindow, 3000);

				var person:XML = XML(value);
				if(!viewerID)
				{
					viewerID = person.id[0];
					getFavorites();
				}
				currentPerson = addItem(person.id[0], person.name[0], person.thumbnail[0], null);
				existingPersons[currentPerson.id] = true;

				currentFriends = person.friends.friend as XMLList;
				page = new Pagination(currentFriends.length(), DISPLAY_COUNT);
				updateButtonStatus();

				latestAddPersons = [];
				for each(var i:int in page.getNext())
				{
					var friend:XML = currentFriends[i];
					latestAddPersons.push(addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson));
				}
			}

			public function addItem(id:String, name:String, image:String, linkTo:PersonItem):PersonItem
			{
				var newItem:PersonItem = new PersonItem(id, name, image);
				items.add(newItem);
				if (linkTo != null)
				{
					items.link(newItem, linkTo);
				}
				s.dataProvider = items;
				return newItem;
			}

			public function gotDoubleClick(uid:String):void
			{
				if (_test)
				{
					receivedFromJavaScript(personsXML.person.(id == uid));
				}
			}

			private function gotoApplicationPage():void
			{
				navigateToURL(new URLRequest("http://apps.xiaonei.com/campus_roamer"), "_blank");
			}

			private function reset():void
			{
				ExternalInterface.call("reset");
				onCreationComplete();
			}

			private function showNext():void
			{
				clearCurrentLinked();
				if (page.nextAvailable())
				{
					for each(var i:int in page.getNext())
					{
						var friend:XML = currentFriends[i];
						latestAddPersons.push(addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson));
					}
				}
				updateButtonStatus();
				setBusyCursor();
			}

			private function showBefore():void
			{
				clearCurrentLinked();
				if (page.beforeAvaiable())
				{
					for each(var i:int in page.getBefore())
					{
						var friend:XML = currentFriends[i];
						latestAddPersons.push(addItem(friend.id[0], friend.name[0], friend.thumbnail[0], currentPerson));
					}
				}
				updateButtonStatus();
				setBusyCursor();
			}

			private function clearCurrentLinked():void
			{
				for each(var item:PersonItem in latestAddPersons)
				{
					if (items.linked(currentPerson, item) && !existingPersons[item.id])
					{
						items.remove(item);
					}
				}
				latestAddPersons = [];
			}

			private function updateButtonStatus():void
			{
				_showNext.enabled = page.nextAvailable();
				_showBefore.enabled = page.beforeAvaiable();
			}

			private function onCloseSelect(event:Event):void
			{
				if (!_autoClose && ComboBox(event.target).selectedIndex!=0)
				{
					if (_test)
					{
//						receivedFromJavaScript(personsXML.person.(id == ComboBox(event.target).selectedItem.data));
					}
					else
					{
						ExternalInterface.call("loadFriends", ComboBox(event.target).selectedItem.data);
					}
					updateButtonStatus();
					setBusyCursor();
				}
				_autoClose = false;
				_selectFavorites.selectedIndex = 0;
			}
		]]>
		
	</mx:Script>
</mx:Application>
