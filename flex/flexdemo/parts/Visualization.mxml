<?xml version="1.0" encoding="utf-8"?>
<CmdPanel xmlns="parts.*" 	
	xmlns:ugv="com.businessobjects.flex.component.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="init();"
 xmlns:ns1="com.businessobjects.flex.component.bcr.*">
<mx:Script>
	<![CDATA[
	    import mx.collections.ArrayCollection;
	    import mx.events.NumericStepperEvent;
	    import com.businessobjects.flex.component.bcr.IBCRAnalysisType;
	    import com.businessobjects.flex.component.bcr.BCRSelectEvent;
	import com.businessobjects.flex.component.CustomSelectionRenderer;
	import com.businessobjects.flex.transport.ITransportDelegate;
	import com.businessobjects.flex.component.UGVManager;
   	import mx.rpc.events.*;
	import com.businessobjects.flex.events.DataContextEvent;
	import com.businessobjects.flex.events.GraphViewerEvent;
   	import commands.CommandProcessor;
	import com.businessobjects.flex.component.Controller;
	import com.businessobjects.flex.transport.TransportDelegate;
	import com.businessobjects.flex.listeners.RemoteEventHandler;

	private var refreshTimer_: Timer;
	private var dbToken_:String;
	private var tokenHasChanged_:Boolean=false;
	
	private var bcrManager_:UGVManager;
	
	private var additionalCharts_:ArrayCollection= new ArrayCollection();
	
	private var currentlySelectedAnalysisType_:IBCRAnalysisType;
	private var currentlySelectedGraphIndex_:int = 0;
		
        private function init():void 
        {
			var transport:TransportDelegate = new TransportDelegate();
			controller.transportDelegate = transport;
			controller.register(chart);
			/*controller.register(chart2);
			controller.register(chart3); */
			cruisectrl.table.showCheckColumn = false;
			controller.register(cruisectrl.table);
			controller.synchronizeTableWithChart(cruisectrl.table,chart);
			bcrManager_ = new UGVManager();
			bcrManager_.addComponent(bcrPanel);
			cruisectrl.table.setDefaultBehaviour(true);
//			chart.selectionRenderer = new CustomSelectionRenderer(0xffffff, 0.6);
            addEventListener(BCRSelectEvent.NAME,changeChart);
        }

        override protected function onAnswerReceived(event:ResultEvent):void
        {	           			
			controller.getTransportDelegate().host= cmdProc.host;
			var bcrTransportDelegate:ITransportDelegate = bcrManager_.getTransportDelegate();
            bcrTransportDelegate.host= cmdProc.host;
            if (event.result.answer.action == "chartit")
            {
            	if (event.result.answer.dataReady.status == "ok")
            	{            		
            		
            		dbToken_ = event.result.answer.dataReady.token;
            		tokenHasChanged_=true;
					//master.url = cmdProc.host + "GraphDataService";;
            		/*controller.dataToken = dbToken_;
            		chart.graphType = "none";   
            		chart.settingsToken = "businessgraphics/bar";         		
            		chart.dataReady = true; */
            		// ask for BCR
            		cmdProc.processCommand("bcr&token=" + dbToken_ + "&max=50");
            		bcrPanel.dataToken = dbToken_;
            	}
            }
            
            else if (event.result.answer.action == "updatedata")
            {
            		controller.dataToken = dbToken_;
            }
        }

		private function refreshData():void {
			
			if (refreshTimer_ == null)
			{
				refreshTimer_ = new Timer(stepper.value*1000, 0);
				refreshTimer_.start();	
				stepper.enabled = false;
				refresh.label="Stop";
				refreshTimer_.addEventListener("timer", onRefreshTimer);
			}
			else
			{
				refreshTimer_.stop();
				refreshTimer_ = null;
				stepper.enabled = true;
				refresh.label="Animate!";
			}
			
		}
		
		private function onRefreshTimer(e:TimerEvent):void
		{
			cmdProc.processCommand( "updatedata&token=" + dbToken_ + "&mode=rotate");
		}
		
		public function changeChart(bcrEvent:BCRSelectEvent=null):void
		{
			if (bcrEvent) {
    			currentlySelectedAnalysisType_ = bcrEvent.selectedAnalysisType;
    			currentlySelectedGraphIndex_ = bcrEvent.selectedGraphIndex;
			}
			
		    /* if (!chartType)
				chartType=cbBCR.selectedItem.I; */ 
			if (tokenHasChanged_)
			{
				controller.dataToken=dbToken_;
				tokenHasChanged_=false;
			}
			chart.graphType = currentlySelectedAnalysisType_.graphs[currentlySelectedGraphIndex_].graphId;;
			chart.settingsToken = chart.graphType;
			
			var graphIndex:int=currentlySelectedGraphIndex_+1;
			for (var chartIdx:int=0; chartIdx<additionalCharts_.length ;chartIdx++) {
			    graphIndex = (graphIndex+chartIdx)%currentlySelectedAnalysisType_.graphs.length;
			    additionalCharts_[chartIdx].graphType=currentlySelectedAnalysisType_.graphs[graphIndex].graphId;
			    additionalCharts_[chartIdx].settingsToken = additionalCharts_[chartIdx].graphType;
			}
		}

        private function changeNbOfCharts(e:NumericStepperEvent):void {
            var triggerChangeChart:Boolean = false;
            for (var i:int=(additionalCharts_.length+1); i < e.value ;i++){
                var viewer:GraphViewer = new GraphViewer();
                viewer.percentHeight=100;
                viewer.percentWidth=100;
                viewer.id="chart"+i;
                controller.register(viewer);
                controller.dataToken=controller.dataToken;
                viewers.addChild(viewer);
                additionalCharts_.addItem(viewer);
                triggerChangeChart=true;
            }
            
            for (var chartIdx:int = 0; chartIdx<additionalCharts_.length ;chartIdx++) {
                if (chartIdx >= (e.value-1)) {
                    additionalCharts_[chartIdx].visible=false;
                    additionalCharts_[chartIdx].percentWidth=0;
                }
                else {
                    additionalCharts_[chartIdx].percentWidth=100;
                    additionalCharts_[chartIdx].visible=true;
                }
            }
            
            if (triggerChangeChart)
                changeChart();
        }
		
	]]>
</mx:Script>
    <ugv:Controller id="controller" remoteEventHandler="default"/>
 	<mx:VDividedBox width="100%" height="100%">
		<mx:HBox id="viewers" width="100%" height="60%">
            <ugv:GraphViewer    
                id="chart" 
                width="100%"
                height="100%">
                <ugv:tooltips>
                    <ugv:Tooltip enabled="true" backgroundColor="#FFFFFF" backgroundAlpha="0.8"/>
                </ugv:tooltips>
            </ugv:GraphViewer>
        </mx:HBox>
	<mx:HDividedBox width="100%" height="40%">
		<ns1:BCRPanel id="bcrPanel" width="180" height="100%"/>
		<ugv:CruiseControl id="cruisectrl" width="100%" height="100%"/>
	</mx:HDividedBox>
	
	</mx:VDividedBox>
   <mx:ApplicationControlBar width="100%">
        <mx:Label text="# of viewers"/>
        <mx:NumericStepper id="chartCount" minimum="1" maximum="3" change="changeNbOfCharts(event)"/>
		<mx:Button id="refresh" label="Animate" click="refreshData()"/>
		<mx:Label text="Frequency"/>
		<mx:NumericStepper minimum="2" maximum="10" stepSize="1" value="3" id="stepper"/>
    </mx:ApplicationControlBar >

</CmdPanel>
